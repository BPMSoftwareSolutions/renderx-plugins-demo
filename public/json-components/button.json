{
  "metadata": {
    "type": "button",
    "name": "Button",
    "version": "1.0.0",
    "author": "RenderX Team",
    "description": "Interactive button component with click handling - JSON replacement for built-in button",
    "category": "basic",
    "tags": ["button", "interactive", "form", "ui"],
    "replaces": "button"
  },
  "ui": {
    "template": "<button class=\"rx-button rx-button--{{variant}} rx-button--{{size}}\" type=\"button\" {{#if disabled}}disabled{{/if}}>{{content}}</button>",
    "styles": {
      "css": ".rx-button { background-color: var(--bg-color); color: var(--text-color); border: var(--border); padding: var(--padding); border-radius: var(--border-radius); cursor: pointer; font-size: var(--font-size); font-weight: 500; transition: all 0.2s ease; display: inline-flex; align-items: center; justify-content: center; text-decoration: none; user-select: none; } .rx-button:hover:not(:disabled) { background-color: var(--hover-bg); transform: translateY(-1px); box-shadow: 0 2px 8px rgba(0,0,0,0.15); } .rx-button:active:not(:disabled) { transform: translateY(0); box-shadow: 0 1px 4px rgba(0,0,0,0.1); } .rx-button:disabled { opacity: 0.6; cursor: not-allowed; } .rx-button--primary { --bg-color: #007bff; --text-color: #ffffff; --hover-bg: #0056b3; --border: none; } .rx-button--secondary { --bg-color: #6c757d; --text-color: #ffffff; --hover-bg: #545b62; --border: none; } .rx-button--danger { --bg-color: #dc3545; --text-color: #ffffff; --hover-bg: #c82333; --border: none; } .rx-button--small { --padding: 4px 8px; --font-size: 12px; --border-radius: 3px; } .rx-button--medium { --padding: 8px 16px; --font-size: 14px; --border-radius: 4px; } .rx-button--large { --padding: 12px 24px; --font-size: 16px; --border-radius: 6px; }",
      "variables": {
        "bg-color": "#007acc",
        "text-color": "#ffffff",
        "hover-bg": "#0056b3",
        "border": "none",
        "padding": "8px 16px",
        "border-radius": "4px",
        "font-size": "14px"
      },
      "library": {
        "variables": {
          "font-size": "14px",
          "padding": "8px 16px",
          "border-radius": "8px",
          "rx-icon-size": "16px",
          "rx-icon-gap": "8px",
          "btn-bg": "linear-gradient(135deg, #4f46e5, #3b82f6)",
          "btn-color": "#ffffff",
          "btn-hover-bg": "linear-gradient(135deg, #4338ca, #3730a3)"
        },
        "css": ".rx-lib .rx-button { display: inline-flex; align-items: center; gap: var(--rx-icon-gap, 8px); font-size: var(--font-size, 14px); padding: var(--padding, 8px 16px); border-radius: var(--border-radius, 8px); border: none; background: var(--btn-bg); color: var(--btn-color); font-weight: 600; letter-spacing: 0.3px; cursor: pointer; transition: transform 0.2s ease, box-shadow 0.3s ease, background 0.3s ease; box-shadow: 0 2px 6px rgba(0,0,0,0.15); } .rx-lib .rx-button[data-icon]::before { content: attr(data-icon); font-size: var(--rx-icon-size, 16px); line-height: 1; opacity: 0.9; } .rx-lib .rx-button[data-icon-pos='end'] { flex-direction: row-reverse; } .rx-lib .rx-button[data-icon-pos='end']::before { margin-left: var(--rx-icon-gap, 8px); margin-right: 0; } .rx-lib .rx-button:hover { transform: translateY(-2px) scale(1.02); box-shadow: 0 4px 12px rgba(0,0,0,0.2); background: var(--btn-hover-bg); } .rx-lib .rx-button:active { transform: scale(0.97); box-shadow: 0 2px 4px rgba(0,0,0,0.25) inset; } .rx-lib .rx-button:focus { outline: none; box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.5); }"
      }
    },
    "icon": {
      "mode": "emoji",
      "value": "ðŸ”˜",
      "position": "start"
    },
    "tools": {
      "drag": { "enabled": true },
      "resize": {
        "enabled": true,
        "handles": ["nw", "n", "ne", "e", "se", "s", "sw", "w"],
        "constraints": { "min": { "w": 40, "h": 24 } }
      }
    }
  },
  "integration": {
    "properties": {
      "schema": {
        "content": {
          "type": "string",
          "default": "Click me",
          "description": "Button text content",
          "required": true
        },
        "variant": {
          "type": "string",
          "default": "primary",
          "description": "Button style variant",
          "enum": ["primary", "secondary", "danger"]
        },
        "size": {
          "type": "string",
          "default": "medium",
          "description": "Button size",
          "enum": ["small", "medium", "large"]
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "description": "Whether the button is disabled"
        }
      },
      "defaultValues": {
        "content": "Click me",
        "variant": "primary",
        "size": "medium",
        "disabled": false
      }
    },
    "canvasIntegration": {
      "resizable": true,
      "draggable": true,
      "selectable": true,
      "minWidth": 80,
      "minHeight": 30,
      "maxWidth": 400,
      "maxHeight": 100,
      "defaultWidth": 120,
      "defaultHeight": 40,
      "snapToGrid": true,
      "allowChildElements": false
    },
    "events": {
      "click": {
        "description": "Triggered when the button is clicked",
        "parameters": ["event", "elementData"]
      },
      "focus": {
        "description": "Triggered when the button receives focus",
        "parameters": ["event", "elementData"]
      },
      "blur": {
        "description": "Triggered when the button loses focus",
        "parameters": ["event", "elementData"]
      }
    }
  },
  "interactions": {
    "canvas.component.create": {
      "pluginId": "CanvasComponentPlugin",
      "sequenceId": "canvas-component-create-symphony"
    },
    "canvas.component.select": {
      "pluginId": "CanvasComponentSelectionPlugin",
      "sequenceId": "canvas-component-select-symphony"
    },
    "canvas.component.drag.move": {
      "pluginId": "CanvasComponentDragPlugin",
      "sequenceId": "canvas-component-drag-symphony"
    },
    "canvas.component.resize.start": {
      "pluginId": "CanvasComponentResizeStartPlugin",
      "sequenceId": "canvas-component-resize-start-symphony"
    },
    "canvas.component.resize.move": {
      "pluginId": "CanvasComponentResizeMovePlugin",
      "sequenceId": "canvas-component-resize-move-symphony"
    },
    "canvas.component.resize.end": {
      "pluginId": "CanvasComponentResizeEndPlugin",
      "sequenceId": "canvas-component-resize-end-symphony"
    }
  }
}
