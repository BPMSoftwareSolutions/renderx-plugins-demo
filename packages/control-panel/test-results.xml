<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="81" failures="0" errors="0" time="1.7708079">
    <testsuite name="__tests__/attribute-editing.bidirectional.spec.ts" timestamp="2025-10-29T11:42:17.480Z" hostname="BPMHOMEOFFICE" tests="5" failures="0" errors="0" skipped="0" time="0.0648696">
        <testcase classname="__tests__/attribute-editing.bidirectional.spec.ts" name="Control Panel bidirectional attribute editing &gt; forwards content changes to Canvas component" time="0.0289191">
        </testcase>
        <testcase classname="__tests__/attribute-editing.bidirectional.spec.ts" name="Control Panel bidirectional attribute editing &gt; forwards styling changes to Canvas component" time="0.0053035">
        </testcase>
        <testcase classname="__tests__/attribute-editing.bidirectional.spec.ts" name="Control Panel bidirectional attribute editing &gt; forwards layout changes to Canvas component" time="0.0045521">
        </testcase>
        <testcase classname="__tests__/attribute-editing.bidirectional.spec.ts" name="Control Panel bidirectional attribute editing &gt; Canvas component updates DOM when receiving attribute changes" time="0.0196269">
        </testcase>
        <testcase classname="__tests__/attribute-editing.bidirectional.spec.ts" name="Control Panel bidirectional attribute editing &gt; updates trigger Control Panel refresh for bidirectional sync" time="0.0038637">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/attribute-editing.integration.spec.ts" timestamp="2025-10-29T11:42:17.490Z" hostname="BPMHOMEOFFICE" tests="3" failures="0" errors="0" skipped="0" time="0.0641876">
        <testcase classname="__tests__/attribute-editing.integration.spec.ts" name="Control Panel ↔ Canvas Component Integration &gt; demonstrates full bidirectional attribute editing flow" time="0.0496912">
            <system-out>
🎯 Testing content change...
🎨 Testing styling changes...
📐 Testing layout changes...
🔧 Testing variant changes...
✅ Testing disabled state...
🎉 Full bidirectional flow completed successfully!

            </system-out>
        </testcase>
        <testcase classname="__tests__/attribute-editing.integration.spec.ts" name="Control Panel ↔ Canvas Component Integration &gt; handles multiple rapid attribute changes" time="0.0063293">
        </testcase>
        <testcase classname="__tests__/attribute-editing.integration.spec.ts" name="Control Panel ↔ Canvas Component Integration &gt; gracefully handles invalid attribute updates" time="0.0053264">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/bidirectional-sync.spec.ts" timestamp="2025-10-29T11:42:17.491Z" hostname="BPMHOMEOFFICE" tests="13" failures="0" errors="0" skipped="0" time="0.2497661">
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; button component &gt; should extract correct variant when selecting element" time="0.1278222">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; button component &gt; should extract updated variant after DOM class changes" time="0.0138871">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; button component &gt; should extract correct size when selecting element" time="0.0112312">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; button component &gt; should extract updated size after DOM class changes" time="0.0110221">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; heading component &gt; should extract correct level when selecting element" time="0.0173421">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; heading component &gt; should extract updated level after DOM class changes" time="0.0071827">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; image component &gt; should extract correct variant when selecting element" time="0.0090153">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; image component &gt; should extract updated variant after DOM class changes" time="0.0055401">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; input component &gt; should extract correct variant when selecting element" time="0.0108857">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; input component &gt; should extract updated variant after DOM class changes" time="0.0078502">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; paragraph component &gt; should extract correct variant when selecting element" time="0.0073056">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; paragraph component &gt; should extract updated variant after DOM class changes" time="0.0070065">
        </testcase>
        <testcase classname="__tests__/bidirectional-sync.spec.ts" name="Control Panel: Bidirectional Sync (Auto-generated Tests) &gt; should preserve fast path for drag/resize operations" time="0.0084335">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/classes.editing.spec.ts" timestamp="2025-10-29T11:42:17.496Z" hostname="BPMHOMEOFFICE" tests="4" failures="0" errors="0" skipped="0" time="0.0458717">
        <testcase classname="__tests__/classes.editing.spec.ts" name="Control Panel class editing sequences &gt; adds CSS class to selected element via stage-crew" time="0.0259126">
        </testcase>
        <testcase classname="__tests__/classes.editing.spec.ts" name="Control Panel class editing sequences &gt; removes CSS class from selected element via stage-crew" time="0.0076803">
        </testcase>
        <testcase classname="__tests__/classes.editing.spec.ts" name="Control Panel class editing sequences &gt; publishes class changes via EventRouter" time="0.006466">
        </testcase>
        <testcase classname="__tests__/classes.editing.spec.ts" name="Control Panel class editing sequences &gt; handles missing element gracefully for class operations" time="0.0030656">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/css.idempotency.spec.ts" timestamp="2025-10-29T11:42:17.497Z" hostname="BPMHOMEOFFICE" tests="2" failures="0" errors="0" skipped="0" time="0.0083865">
        <testcase classname="__tests__/css.idempotency.spec.ts" name="CSS registry idempotency &gt; createCssClass is idempotent: second create with same content is a success no-op" time="0.0045235">
        </testcase>
        <testcase classname="__tests__/css.idempotency.spec.ts" name="CSS registry idempotency &gt; updateCssClass upserts when missing and no-ops when content unchanged" time="0.0015072">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/dark-mode-form-controls.spec.tsx" timestamp="2025-10-29T11:42:17.498Z" hostname="BPMHOMEOFFICE" tests="5" failures="0" errors="0" skipped="0" time="0.128477">
        <testcase classname="__tests__/dark-mode-form-controls.spec.tsx" name="Control Panel Dark Mode Form Controls &gt; property-input has correct CSS classes and attributes" time="0.0688826">
            <system-err>
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="__tests__/dark-mode-form-controls.spec.tsx" name="Control Panel Dark Mode Form Controls &gt; property-select has correct CSS classes and options" time="0.0190894">
            <system-err>
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="__tests__/dark-mode-form-controls.spec.tsx" name="Control Panel Dark Mode Form Controls &gt; select options inherit dark theme styling" time="0.0132746">
            <system-err>
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="__tests__/dark-mode-form-controls.spec.tsx" name="Control Panel Dark Mode Form Controls &gt; property-checkbox label uses theme colors" time="0.0160502">
            <system-err>
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="__tests__/dark-mode-form-controls.spec.tsx" name="Control Panel Dark Mode Form Controls &gt; checkbox-text class uses theme colors" time="0.0088351">
            <system-err>
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="__tests__/eventrouter-communication.spec.ts" timestamp="2025-10-29T11:42:17.500Z" hostname="BPMHOMEOFFICE" tests="5" failures="0" errors="0" skipped="0" time="0.1804198">
        <testcase classname="__tests__/eventrouter-communication.spec.ts" name="Control Panel EventRouter Communication &gt; publishes control.panel.selection.updated events via EventRouter" time="0.0247803">
        </testcase>
        <testcase classname="__tests__/eventrouter-communication.spec.ts" name="Control Panel EventRouter Communication &gt; publishes control.panel.classes.updated events via EventRouter" time="0.0315035">
        </testcase>
        <testcase classname="__tests__/eventrouter-communication.spec.ts" name="Control Panel EventRouter Communication &gt; publishes control.panel.css.registry.updated events via EventRouter" time="0.0303602">
        </testcase>
        <testcase classname="__tests__/eventrouter-communication.spec.ts" name="Control Panel EventRouter Communication &gt; allows multiple Control Panel components to listen for selection updates" time="0.0470409">
        </testcase>
        <testcase classname="__tests__/eventrouter-communication.spec.ts" name="Control Panel EventRouter Communication &gt; enables Control Panel UI package to receive symphony events" time="0.0442722">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/exports.spec.ts" timestamp="2025-10-29T11:42:17.502Z" hostname="BPMHOMEOFFICE" tests="3" failures="0" errors="0" skipped="0" time="0.0049594">
        <testcase classname="__tests__/exports.spec.ts" name="@renderx-plugins/control-panel package exports &gt; exports ControlPanel UI component" time="0.0018994">
        </testcase>
        <testcase classname="__tests__/exports.spec.ts" name="@renderx-plugins/control-panel package exports &gt; exports register() function (no-op allowed)" time="0.0002559">
        </testcase>
        <testcase classname="__tests__/exports.spec.ts" name="@renderx-plugins/control-panel package exports &gt; exports selection symphony handlers" time="0.0003516">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/heading-level-sync.spec.ts" timestamp="2025-10-29T11:42:17.502Z" hostname="BPMHOMEOFFICE" tests="4" failures="0" errors="0" skipped="0" time="0.15313">
        <testcase classname="__tests__/heading-level-sync.spec.ts" name="Control Panel: Heading Level Sync (Issue #50) &gt; should extract correct heading level when selecting a heading element" time="0.1157464">
        </testcase>
        <testcase classname="__tests__/heading-level-sync.spec.ts" name="Control Panel: Heading Level Sync (Issue #50) &gt; should extract updated heading level after class change" time="0.0139395">
        </testcase>
        <testcase classname="__tests__/heading-level-sync.spec.ts" name="Control Panel: Heading Level Sync (Issue #50) &gt; should handle heading level extraction from tagName when no class variant" time="0.0106588">
        </testcase>
        <testcase classname="__tests__/heading-level-sync.spec.ts" name="Control Panel: Heading Level Sync (Issue #50) &gt; should preserve fast path for drag/resize operations" time="0.0093247">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/html.code-editor.fallback.spec.ts" timestamp="2025-10-29T11:42:17.504Z" hostname="BPMHOMEOFFICE" tests="1" failures="0" errors="0" skipped="0" time="0.0063033">
        <testcase classname="__tests__/html.code-editor.fallback.spec.ts" name="HTML component markup field fallback &gt; forces code type even if ui.control missing (legacy cached schema)" time="0.0043025">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/html.code-editor.mapping.spec.ts" timestamp="2025-10-29T11:42:17.504Z" hostname="BPMHOMEOFFICE" tests="1" failures="0" errors="0" skipped="0" time="0.0062127">
        <testcase classname="__tests__/html.code-editor.mapping.spec.ts" name="HTML component markup field &gt; uses code textarea renderer (type=code)" time="0.0040767">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/integration.end-to-end.spec.ts" timestamp="2025-10-29T11:42:17.504Z" hostname="BPMHOMEOFFICE" tests="1" failures="0" errors="0" skipped="0" time="0.1407874">
        <testcase classname="__tests__/integration.end-to-end.spec.ts" name="Control Panel Integration - End to End &gt; complete flow: create element → select → control panel updates → add class → UI updates" time="0.1373775">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/interaction-routing.spec.ts" timestamp="2025-10-29T11:42:17.505Z" hostname="BPMHOMEOFFICE" tests="4" failures="0" errors="0" skipped="0" time="0.0058398">
        <testcase classname="__tests__/interaction-routing.spec.ts" name="Control Panel interaction routing &gt; resolves control.panel.selection.show to ControlPanelPlugin" time="0.0029309">
        </testcase>
        <testcase classname="__tests__/interaction-routing.spec.ts" name="Control Panel interaction routing &gt; resolves control.panel.classes.add to ControlPanelPlugin" time="0.0004665">
        </testcase>
        <testcase classname="__tests__/interaction-routing.spec.ts" name="Control Panel interaction routing &gt; resolves control.panel.classes.remove to ControlPanelPlugin" time="0.0003551">
        </testcase>
        <testcase classname="__tests__/interaction-routing.spec.ts" name="Control Panel interaction routing &gt; resolves control.panel.update to ControlPanelPlugin" time="0.0001958">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/live-updates.drag-resize.spec.ts" timestamp="2025-10-29T11:42:17.506Z" hostname="BPMHOMEOFFICE" tests="4" failures="0" errors="0" skipped="0" time="0.5146243">
        <testcase classname="__tests__/live-updates.drag-resize.spec.ts" name="Control Panel live updates during drag/resize &gt; forwards drag position updates to Control Panel" time="0.1334633">
        </testcase>
        <testcase classname="__tests__/live-updates.drag-resize.spec.ts" name="Control Panel live updates during drag/resize &gt; forwards resize updates to Control Panel with position and size" time="0.1896312">
        </testcase>
        <testcase classname="__tests__/live-updates.drag-resize.spec.ts" name="Control Panel live updates during drag/resize &gt; Control Panel update sequence derives current position/size from DOM" time="0.0133557">
        </testcase>
        <testcase classname="__tests__/live-updates.drag-resize.spec.ts" name="Control Panel live updates during drag/resize &gt; notifies UI observer with updated model during live updates" time="0.1743792">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/observer.store.spec.ts" timestamp="2025-10-29T11:42:17.508Z" hostname="BPMHOMEOFFICE" tests="1" failures="0" errors="0" skipped="0" time="0.0057193">
        <testcase classname="__tests__/observer.store.spec.ts" name="observer.store idempotency &gt; setters are idempotent and clearAll resets observers" time="0.0034428">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/schema-resolver.memo.spec.ts" timestamp="2025-10-29T11:42:17.509Z" hostname="BPMHOMEOFFICE" tests="2" failures="0" errors="0" skipped="0" time="0.0078736">
        <testcase classname="__tests__/schema-resolver.memo.spec.ts" name="SchemaResolverService memoization &gt; dedupes schema fetches across multiple calls and instances" time="0.0041836">
        </testcase>
        <testcase classname="__tests__/schema-resolver.memo.spec.ts" name="SchemaResolverService memoization &gt; registers cached schemas into new instances without refetching" time="0.0009357">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/selection.package-notify.observer.spec.ts" timestamp="2025-10-29T11:42:17.510Z" hostname="BPMHOMEOFFICE" tests="1" failures="0" errors="0" skipped="0" time="0.0109663">
        <testcase classname="__tests__/selection.package-notify.observer.spec.ts" name="Control Panel (package) selection notify -&gt; EventRouter &gt; publishes control.panel.selection.updated via EventRouter when notifyUi runs" time="0.008607">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/selection.sequence-model-and-notify.spec.ts" timestamp="2025-10-29T11:42:17.511Z" hostname="BPMHOMEOFFICE" tests="3" failures="0" errors="0" skipped="0" time="0.1282807">
        <testcase classname="__tests__/selection.sequence-model-and-notify.spec.ts" name="Control Panel selection sequence builds data-driven model &gt; derives selection model from DOM element and component JSON" time="0.1109329">
        </testcase>
        <testcase classname="__tests__/selection.sequence-model-and-notify.spec.ts" name="Control Panel selection sequence builds data-driven model &gt; publishes selection model via EventRouter" time="0.0091835">
        </testcase>
        <testcase classname="__tests__/selection.sequence-model-and-notify.spec.ts" name="Control Panel selection sequence builds data-driven model &gt; handles missing element gracefully" time="0.0048458">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/svg.code-editor.mapping.spec.ts" timestamp="2025-10-29T11:42:17.512Z" hostname="BPMHOMEOFFICE" tests="1" failures="0" errors="0" skipped="0" time="0.0105605">
        <testcase classname="__tests__/svg.code-editor.mapping.spec.ts" name="SVG schema → code editor mapping &gt; maps ui.control = code to field.type = &apos;code&apos; and applies preserveAspectRatio enum presets" time="0.0082141">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/ui-init.batched.spec.ts" timestamp="2025-10-29T11:42:17.513Z" hostname="BPMHOMEOFFICE" tests="1" failures="0" errors="0" skipped="0" time="0.007494">
        <testcase classname="__tests__/ui-init.batched.spec.ts" name="Control Panel UI Init — batched iterator &gt; records sub-beat telemetry for the five init steps when run via iterator" time="0.0054789">
        </testcase>
    </testsuite>
    <testsuite name="__tests__/ui-sequences.spec.ts" timestamp="2025-10-29T11:42:17.513Z" hostname="BPMHOMEOFFICE" tests="17" failures="0" errors="0" skipped="0" time="0.0260783">
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.init sequence handlers &gt; initConfig should mark config as loaded" time="0.006471">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.init sequence handlers &gt; initResolver should create resolver instance" time="0.0017887">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.init sequence handlers &gt; loadSchemas should mark schemas as loaded" time="0.0013975">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.init sequence handlers &gt; registerObservers should mark observers as registered" time="0.0007979">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.init sequence handlers &gt; notifyReady should mark UI as ready" time="0.0010183">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.render sequence handlers &gt; generateFields should generate empty fields when no resolver" time="0.0016417">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.render sequence handlers &gt; generateSections should generate empty sections when no resolver" time="0.0009895">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.render sequence handlers &gt; renderView should mark view as rendered" time="0.0009096">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.field.change sequence handlers &gt; prepareField should prepare field change data" time="0.00134">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.field.change sequence handlers &gt; dispatchField should forward to canvas update" time="0.0011047">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.field.change sequence handlers &gt; setDirty should mark UI as dirty" time="0.0005948">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.field.change sequence handlers &gt; awaitRefresh should mark refresh as awaited" time="0.0004699">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.field.validate sequence handlers &gt; validateField should validate field when no resolver" time="0.0010106">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.field.validate sequence handlers &gt; mergeErrors should mark errors as merged" time="0.0008874">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.field.validate sequence handlers &gt; updateView should mark view as updated" time="0.0005808">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.section.toggle sequence handlers &gt; toggleSection should toggle section state" time="0.0005568">
        </testcase>
        <testcase classname="__tests__/ui-sequences.spec.ts" name="Control Panel UI Sequences &gt; ui.section.toggle sequence handlers &gt; toggleSection should handle missing sectionId" time="0.0007369">
        </testcase>
    </testsuite>
</testsuites>
