<svg width="1400" height="900" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <!-- CSS for theme awareness -->
    <style>
      <![CDATA[
      /* Light theme (default) */
      .bg-primary { fill: #ffffff; }
      .bg-secondary { fill: #f8fafc; }
      .text-primary { fill: #0f172a; }
      .text-secondary { fill: #334155; }
      .text-muted { fill: #64748b; }
      .border-light { stroke: #e2e8f0; }
      
      /* Symphony theme colors */
      .ui-bg { fill: #e0f2fe; stroke: #0369a1; }
      .ui-text { fill: #0c4a6e; }
      .conductor-bg { fill: #faf5ff; stroke: #7c3aed; }
      .conductor-text { fill: #4c1d95; }
      .symphony-bg { fill: #fef3c7; stroke: #d97706; }
      .symphony-text { fill: #92400e; }
      .beat-bg { fill: #ecfdf5; stroke: #059669; }
      .beat-text { fill: #064e3b; }
      .log-bg { fill: #f1f5f9; stroke: #64748b; }
      .log-text { fill: #374151; }
      
      /* Dark theme */
      @media (prefers-color-scheme: dark) {
        .bg-primary { fill: #0f172a; }
        .bg-secondary { fill: #1e293b; }
        .text-primary { fill: #f1f5f9; }
        .text-secondary { fill: #cbd5e1; }
        .text-muted { fill: #94a3b8; }
        .border-light { stroke: #334155; }
        
        .ui-bg { fill: #0c4a6e; stroke: #0ea5e9; }
        .ui-text { fill: #bae6fd; }
        .conductor-bg { fill: #4c1d95; stroke: #8b5cf6; }
        .conductor-text { fill: #ddd6fe; }
        .symphony-bg { fill: #92400e; stroke: #f59e0b; }
        .symphony-text { fill: #fcd34d; }
        .beat-bg { fill: #064e3b; stroke: #10b981; }
        .beat-text { fill: #bbf7d0; }
        .log-bg { fill: #374151; stroke: #6b7280; }
        .log-text { fill: #d1d5db; }
      }
      
      /* Musical animations */
      @keyframes conduct {
        0%, 100% { transform: rotate(-3deg); }
        50% { transform: rotate(3deg); }
      }
      
      .conducting { animation: conduct 2s ease-in-out infinite; }
      
      @keyframes flow {
        0% { stroke-dashoffset: 30; }
        100% { stroke-dashoffset: 0; }
      }
      
      .flow-line { 
        stroke-dasharray: 15, 5; 
        animation: flow 3s linear infinite; 
      }
      
      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.6; }
      }
      
      .pulse { animation: pulse 1.5s infinite; }
      
      @keyframes beat {
        0%, 100% { transform: scale(1); }
        50% { transform: scale(1.05); }
      }
      
      .beating { animation: beat 1s ease-in-out infinite; }
      ]]>
    </style>
    
    <!-- Musical background pattern -->
    <pattern id="musicalGrid" width="40" height="40" patternUnits="userSpaceOnUse">
      <path d="M 40 0 L 0 0 0 40" fill="none" class="border-light" stroke-width="0.3" opacity="0.2"/>
      <!-- Musical notes -->
      <circle cx="10" cy="15" r="2" class="conductor-text" opacity="0.1"/>
      <path d="M 10 15 L 10 5" class="conductor-text" stroke-width="1" opacity="0.1"/>
      <circle cx="30" cy="25" r="1.5" class="symphony-text" opacity="0.1"/>
      <path d="M 30 25 L 30 10" class="symphony-text" stroke-width="0.8" opacity="0.1"/>
    </pattern>
    
    <!-- Arrow markers -->
    <marker id="flowArrow" markerWidth="10" markerHeight="10" 
            refX="8" refY="3" orient="auto" markerUnits="strokeWidth">
      <path d="M0,0 L0,6 L9,3 z" class="conductor-text"/>
    </marker>
    
    <marker id="beatArrow" markerWidth="8" markerHeight="8" 
            refX="6" refY="3" orient="auto" markerUnits="strokeWidth">
      <path d="M0,0 L0,6 L7,3 z" class="beat-text"/>
    </marker>
    
    <!-- Shadow filter -->
    <filter id="dropShadow" x="-50%" y="-50%" width="200%" height="200%">
      <feDropShadow dx="2" dy="4" stdDeviation="3" flood-color="#000000" flood-opacity="0.15"/>
    </filter>
    
    <!-- Glow effect -->
    <filter id="glow" x="-50%" y="-50%" width="200%" height="200%">
      <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
      <feMerge> 
        <feMergeNode in="coloredBlur"/>
        <feMergeNode in="SourceGraphic"/>
      </feMerge>
    </filter>
  </defs>
  
  <!-- Background -->
  <rect width="1400" height="900" class="bg-primary"/>
  <rect width="1400" height="900" fill="url(#musicalGrid)"/>
  
  <!-- Title -->
  <text x="700" y="40" text-anchor="middle" font-family="'Segoe UI', system-ui, sans-serif" 
        font-size="24" font-weight="700" class="text-primary">
    🎼 Symphony Orchestration Flow
  </text>
  <text x="700" y="65" text-anchor="middle" font-family="'Segoe UI', system-ui, sans-serif" 
        font-size="14" class="text-muted" font-style="italic">
    "JSON sequences with correlated logging and cross-plugin sequence tracing"
  </text>
  
  <!-- Step 1: UI Component -->
  <rect x="50" y="100" width="250" height="180" rx="12" class="ui-bg" 
        stroke-width="3" filter="url(#dropShadow)"/>
  
  <text x="70" y="130" font-family="'JetBrains Mono', 'Fira Code', monospace" 
        font-size="14" font-weight="700" class="ui-text">
    🎯 LibraryPanel
  </text>
  <text x="70" y="145" font-family="'Segoe UI', sans-serif" 
        font-size="10" class="text-muted">
    UI Component
  </text>
  
  <!-- Component code -->
  <rect x="70" y="155" width="210" height="110" rx="8" class="bg-secondary border-light" 
        stroke-width="1"/>
  
  <g font-family="'JetBrains Mono', monospace" font-size="10">
    <text x="80" y="175" class="text-secondary">React.useEffect(() => {</text>
    <text x="90" y="190" class="ui-text">conductor.play(</text>
    <text x="100" y="205" class="conductor-text">'LibraryPlugin',</text>
    <text x="100" y="220" class="conductor-text">'load',</text>
    <text x="100" y="235" class="symphony-text">{ onComponentsLoaded: </text>
    <text x="110" y="250" class="beat-text">(data) => setComponents</text>
    <text x="90" y="265" class="ui-text">});</text>
  </g>
  
  <!-- Arrow from UI to Conductor -->
  <path d="M 300 190 Q 400 150 500 190" stroke-width="4" class="conductor-text flow-line" 
        marker-end="url(#flowArrow)" fill="none"/>
  <text x="400" y="140" text-anchor="middle" font-family="'Segoe UI', sans-serif" 
        font-size="10" font-weight="600" class="conductor-text">
    conductor.play()
  </text>
  
  <!-- Step 2: Musical Conductor -->
  <rect x="500" y="100" width="380" height="250" rx="12" class="conductor-bg conducting" 
        stroke-width="3" filter="url(#dropShadow)"/>
  
  <text x="520" y="130" font-family="'JetBrains Mono', 'Fira Code', monospace" 
        font-size="16" font-weight="700" class="conductor-text">
    🎼 Musical Conductor
  </text>
  <text x="520" y="145" font-family="'Segoe UI', sans-serif" 
        font-size="10" class="text-muted">
    Orchestration engine
  </text>
  
  <!-- Symphony JSON box -->
  <rect x="520" y="160" width="340" height="130" rx="8" class="symphony-bg" 
        stroke-width="2"/>
  
  <text x="530" y="180" font-family="'JetBrains Mono', monospace" 
        font-size="12" font-weight="700" class="symphony-text">
    📄 load.symphony.json
  </text>
  
  <g font-family="'JetBrains Mono', monospace" font-size="9">
    <text x="540" y="200" class="text-primary">{ "id": "library.load",</text>
    <text x="550" y="215" class="conductor-text">"pluginId": "LibraryPlugin",</text>
    <text x="550" y="230" class="symphony-text">"movements": [</text>
    <text x="560" y="245" class="beat-text">{ "id": "fetch-components" },</text>
    <text x="560" y="260" class="beat-text">{ "id": "process-data" },</text>
    <text x="560" y="275" class="beat-text">{ "id": "notify-ui" }</text>
    <text x="550" y="290" class="symphony-text">] }</text>
  </g>
  
  <!-- Conductor processing -->
  <rect x="520" y="300" width="340" height="40" rx="6" class="bg-secondary border-light" 
        stroke-width="1" class="pulse"/>
  <g font-family="'Segoe UI', sans-serif" font-size="11" class="text-secondary">
    <text x="530" y="315">🎵 SequenceEngine loads JSON sequence</text>
    <text x="530" y="330">🎯 EventBus publishes beats with correlation ID</text>
  </g>
  
  <!-- Arrow from Conductor to Beat Execution -->
  <path d="M 690 350 Q 690 400 690 450" stroke-width="4" class="beat-text flow-line" 
        marker-end="url(#beatArrow)" fill="none"/>
  
  <!-- Step 3: Beat Execution Flow -->
  <rect x="950" y="100" width="380" height="550" rx="12" class="beat-bg" 
        stroke-width="3" filter="url(#dropShadow)"/>
  
  <text x="970" y="130" font-family="'JetBrains Mono', 'Fira Code', monospace" 
        font-size="16" font-weight="700" class="beat-text">
    🥁 Beat Execution
  </text>
  <text x="970" y="145" font-family="'Segoe UI', sans-serif" 
        font-size="10" class="text-muted">
    Sequential movement execution
  </text>
  
  <!-- Movement 1: Fetch Components -->
  <rect x="970" y="160" width="340" height="80" rx="8" class="bg-secondary border-light beating" 
        stroke-width="2"/>
  
  <text x="980" y="180" font-family="'Segoe UI', sans-serif" 
        font-size="12" font-weight="700" class="beat-text">
    🎵 Movement 1: fetch-components
  </text>
  
  <g font-family="'JetBrains Mono', monospace" font-size="9">
    <text x="990" y="200" class="text-secondary">Beat: api-call</text>
    <text x="990" y="215" class="text-primary">endpoint: "/api/components"</text>
    <text x="990" y="230" class="text-primary">method: "GET"</text>
  </g>
  
  <!-- Movement 2: Process Data -->
  <rect x="970" y="250" width="340" height="80" rx="8" class="bg-secondary border-light beating" 
        stroke-width="2"/>
  
  <text x="980" y="270" font-family="'Segoe UI', sans-serif" 
        font-size="12" font-weight="700" class="beat-text">
    🎵 Movement 2: process-data
  </text>
  
  <g font-family="'JetBrains Mono', monospace" font-size="9">
    <text x="990" y="290" class="text-secondary">Beat: data-transform</text>
    <text x="990" y="305" class="text-primary">handler: "processComponentData"</text>
    <text x="990" y="320" class="text-muted">// Business logic transformation</text>
  </g>
  
  <!-- Movement 3: Notify UI -->
  <rect x="970" y="340" width="340" height="80" rx="8" class="bg-secondary border-light beating" 
        stroke-width="2"/>
  
  <text x="980" y="360" font-family="'Segoe UI', sans-serif" 
        font-size="12" font-weight="700" class="beat-text">
    🎵 Movement 3: notify-ui
  </text>
  
  <g font-family="'JetBrains Mono', monospace" font-size="9">
    <text x="990" y="380" class="text-secondary">Beat: callback</text>
    <text x="990" y="395" class="text-primary">target: "onComponentsLoaded"</text>
    <text x="990" y="410" class="text-muted">// UI state update</text>
  </g>
  
  <!-- Correlation ID tracking -->
  <rect x="970" y="440" width="340" height="60" rx="8" class="conductor-bg" 
        stroke-width="2" class="pulse"/>
  
  <text x="980" y="460" font-family="'Segoe UI', sans-serif" 
        font-size="12" font-weight="700" class="conductor-text">
    🔍 Correlation ID: abc-123
  </text>
  
  <g font-family="'JetBrains Mono', monospace" font-size="9">
    <text x="990" y="480" class="text-secondary">[INFO] Publishing library.load</text>
    <text x="990" y="495" class="text-secondary">[DEBUG] Handler executed</text>
  </g>
  
  <!-- Performance metrics -->
  <rect x="970" y="520" width="340" height="60" rx="8" class="symphony-bg" 
        stroke-width="2"/>
  
  <text x="980" y="540" font-family="'Segoe UI', sans-serif" 
        font-size="12" font-weight="700" class="symphony-text">
    ⏱️ Performance Metrics
  </text>
  
  <g font-family="'JetBrains Mono', monospace" font-size="9">
    <text x="990" y="560" class="text-secondary">Movement 1: 15ms • Movement 2: 8ms</text>
    <text x="990" y="575" class="text-secondary">Movement 3: 3ms • Total: 26ms</text>
  </g>
  
  <!-- Step 4: Cross-Plugin Communication -->
  <rect x="50" y="400" width="500" height="250" rx="12" class="log-bg" 
        stroke-width="3" filter="url(#dropShadow)"/>
  
  <text x="70" y="430" font-family="'JetBrains Mono', 'Fira Code', monospace" 
        font-size="16" font-weight="700" class="log-text">
    🔄 Cross-Plugin Flow
  </text>
  <text x="70" y="445" font-family="'Segoe UI', sans-serif" 
        font-size="10" class="text-muted">
    Plugin coordination example
  </text>
  
  <!-- Drop symphony example -->
  <rect x="70" y="460" width="460" height="120" rx="8" class="bg-secondary border-light" 
        stroke-width="1"/>
  
  <g font-family="'JetBrains Mono', monospace" font-size="10">
    <text x="80" y="480" class="ui-text">// CanvasPage drop event</text>
    <text x="80" y="495" class="conductor-text">conductor.play('LibraryComponentPlugin',</text>
    <text x="140" y="510" class="conductor-text">'drop', { dropData })</text>
    <text x="80" y="530" class="beat-text">↓ drop.symphony.json</text>
    <text x="80" y="545" class="text-secondary">1. validate-drop beat</text>
    <text x="80" y="560" class="text-secondary">2. forward-to-canvas beat</text>
    <text x="90" y="575" class="symphony-text">conductor.play('CanvasComponentPlugin', 'create')</text>
  </g>
  
  <!-- Logging output -->
  <rect x="70" y="590" width="460" height="50" rx="8" class="log-bg" 
        stroke-width="1"/>
  
  <g font-family="'JetBrains Mono', monospace" font-size="9">
    <text x="80" y="610" class="log-text">[INFO] correlationId=def-456</text>
    <text x="80" y="625" class="text-secondary">topic=canvas-component.create plugin=CanvasComponentPlugin</text>
  </g>
  
  <!-- Arrows showing plugin communication -->
  <path d="M 300 530 Q 450 480 500 530" stroke-width="3" class="symphony-text flow-line" 
        marker-end="url(#flowArrow)" fill="none"/>
  <text x="400" y="500" text-anchor="middle" font-family="'Segoe UI', sans-serif" 
        font-size="9" font-weight="600" class="symphony-text">
    Cross-plugin sequence
  </text>
  
  <!-- Benefits summary -->
  <rect x="50" y="700" width="1280" height="150" rx="12" class="bg-secondary border-light" 
        stroke-width="1" filter="url(#dropShadow)"/>
  
  <text x="700" y="730" text-anchor="middle" font-family="'Segoe UI', system-ui, sans-serif" 
        font-size="18" font-weight="700" class="text-primary">
    🎯 Symphony Orchestration Benefits
  </text>
  
  <g font-family="'Segoe UI', system-ui, sans-serif" font-size="12">
    <g class="text-secondary">
      <text x="70" y="760">🎼 <tspan class="symphony-text">Hierarchical beat execution</tspan> with full context and correlation IDs</text>
      <text x="70" y="780">🎯 <tspan class="beat-text">JSON-defined sequences</tspan> make flows self-documenting and traceable</text>
      <text x="70" y="800">🔍 <tspan class="conductor-text">Cross-plugin coordination</tspan> without tight coupling or direct dependencies</text>
      <text x="70" y="820">⏱️ <tspan class="log-text">Performance metrics</tspan> and structured logging at every execution level</text>
    </g>
    
    <text x="700" y="845" text-anchor="middle" class="text-muted" font-style="italic" font-size="11">
      Result: Predictable, traceable, and debuggable plugin orchestration with complete observability
    </text>
  </g>
</svg>